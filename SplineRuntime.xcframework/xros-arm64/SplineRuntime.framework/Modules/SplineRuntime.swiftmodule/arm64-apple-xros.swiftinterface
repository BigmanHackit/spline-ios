// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-xros1.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=unchecked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name SplineRuntime
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFoundation
import Combine
import CompositorServices
import CoreGraphics
import CoreText
import DeveloperToolsSupport
import Foundation
import Metal
import MetalKit
import Network
import QuartzCore
import RealityKit
import Spatial
@_exported import SplineRuntime
import Swift
import SwiftUI
import UIKit
import _CompositorServices_SwiftUI
import _Concurrency
import _RealityKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
import simd
@_Concurrency.MainActor @preconcurrency public struct SplineVolumetricContent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(sceneFileURL: Foundation.URL?)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13SplineRuntime0A17VolumetricContentV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct SplineContent : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13SplineRuntime0A7ContentV4bodyQrvp", 0) __
}
public enum SplineViewPhase {
  case empty
  case success(SplineRuntime.SplineContent)
  case failure(SplineRuntime.SplineViewError)
  public var content: SplineRuntime.SplineContent? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
}
@available(iOS 16.0, macCatalyst 16.0, macOS 13.0, *)
@_Concurrency.MainActor @preconcurrency public struct SplineView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(sceneFileURL: Foundation.URL?, @SwiftUICore.ViewBuilder content: @escaping (SplineRuntime.SplineViewPhase) -> Content = { $0.content })
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 16.0, macOS 13.0, macCatalyst 16.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s13SplineRuntime0A4ViewV4bodyQrvp", 0) __<Content>
}
public enum SplineViewError : Foundation.LocalizedError {
  case deviceUnsupported
  case fileUnreachable
  case fileUnknownFormat
  case fileOldFormat
  case fileNewFormat
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: SplineRuntime.SplineViewError, b: SplineRuntime.SplineViewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct SplineImmersiveSpaceContent : SwiftUI.ImmersiveSpaceContent {
  @_Concurrency.MainActor @preconcurrency public init(sceneFileURL: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public var body: _CompositorServices_SwiftUI.CompositorLayer {
    get
  }
  public typealias Body = _CompositorServices_SwiftUI.CompositorLayer
}
extension SplineRuntime.SplineVolumetricContent : Swift.Sendable {}
extension SplineRuntime.SplineContent : Swift.Sendable {}
@available(iOS 16.0, macCatalyst 16.0, macOS 13.0, *)
extension SplineRuntime.SplineView : Swift.Sendable {}
extension SplineRuntime.SplineViewError : Swift.Equatable {}
extension SplineRuntime.SplineViewError : Swift.Hashable {}
extension SplineRuntime.SplineImmersiveSpaceContent : Swift.Sendable {}
