// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-xros1.0 -enable-objc-interop -cxx-interoperability-mode=default -enable-library-evolution -swift-version 5 -enforce-exclusivity=unchecked -O -module-name SplineRuntime
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import CoreGraphics
import CoreText
import DeveloperToolsSupport
import Foundation
import Metal
import MetalKit
import Network
import QuartzCore
import RealityKit
import Spatial
@_exported import SplineRuntime
import Swift
import SwiftUI
import UIKit
import _CompositorServices_SwiftUI
import _Concurrency
import _RealityKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
import simd
@_hasMissingDesignatedInitializers final public class DisplayLink : Combine.Publisher {
  public typealias Output = SplineRuntime.DisplayLink.Frame
  public typealias Failure = Swift.Never
  final public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == SplineRuntime.DisplayLink.Frame
  @objc deinit
}
extension SplineRuntime.DisplayLink {
  public struct Frame {
    public var timestamp: Foundation.TimeInterval
    public var duration: Foundation.TimeInterval
  }
}
extension SplineRuntime.DisplayLink {
  @available(iOS 13.0, tvOS 13.0, macOS 10.15, *)
  convenience public init()
}
extension SplineRuntime.DisplayLink {
  public static let shared: SplineRuntime.DisplayLink
}
public struct SplineVolumetricContent : SwiftUI.View {
  public init(sceneFileURL: Foundation.URL?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13SplineRuntime0A17VolumetricContentV4bodyQrvp", 0) __
}
public struct SplineContent : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13SplineRuntime0A7ContentV4bodyQrvp", 0) __
}
public enum SplineViewPhase {
  case empty
  case success(SplineRuntime.SplineContent)
  case failure(SplineRuntime.SplineViewError)
  public var content: SplineRuntime.SplineContent? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
}
@available(iOS 16.0, macCatalyst 16.0, macOS 13.0, *)
public struct SplineView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(sceneFileURL: Foundation.URL?, @SwiftUI.ViewBuilder content: @escaping (SplineRuntime.SplineViewPhase) -> Content = { $0.content })
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13SplineRuntime0A4ViewV4bodyQrvp", 0) __<Content>
}
public enum SplineViewError : Foundation.LocalizedError {
  case deviceUnsupported
  case fileUnreachable
  case fileUnknownFormat
  case fileOldFormat
  case fileNewFormat
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: SplineRuntime.SplineViewError, b: SplineRuntime.SplineViewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SplineImmersiveSpaceContent : SwiftUI.ImmersiveSpaceContent {
  public init(sceneFileURL: Foundation.URL)
  public var body: _CompositorServices_SwiftUI.CompositorLayer {
    get
  }
  public typealias Body = _CompositorServices_SwiftUI.CompositorLayer
}
extension SplineRuntime.SplineViewError : Swift.Equatable {}
extension SplineRuntime.SplineViewError : Swift.Hashable {}
